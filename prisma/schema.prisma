generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // uses connection pooling connection
  relationMode = "prisma"
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(SUBACCOUNT_USER)
  agencyId     String?
  Agency       Agency         @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Ticket       Ticket[]
  Notification Notification[]

  @@index([agencyId])
}

model Permissions {
  id           String     @id @default(uuid())
  email        String
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access       Boolean

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  customerId       String                @default("")
  name             String
  agencyLogo       String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  SubAccount       SubAccount[]
  SidebarOption    AgencySidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value       Decimal?
  description String?
  Tags        Tag[]

  customerId String?
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId String?
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}
